/**
 * @file ld.script
 *
 * This is the linker script for the Xinu kernel on the Raspberry Pi3.  The GPU
 * loads the kernel at address 0x8000 by default (in 32-bit mode, although the Pi 3
 * does support 64-bit mode at 0x80000), and the ARM processor starts
 * executing instructions at that address.  We place _start, the entry point for
 * Xinu, in a special .init section to ensure it is placed first in the kernel
 * image.
 *
 * Because of this direct jump to address 0x8000, the "ENTRY(_start)" line below
 * does nothing to set the real entry point of the kernel; however, it _is_
 * needed to specify the entry point to the linker when it is executed with the
 * --gc-sections option, which removes all sections not reachable from the
 * program's entry point.
 *
 * To be safe, we ensure that every section is aligned on a 64-byte (cache line)
 * boundary.
 */
/* Embedded Xinu, Copyright (C) 2013.  All rights reserved. */

ENTRY(_start)

SECTIONS {
  . = 0x80000000;

  .init : {
    *(.init .init.*)
  }

  .text ALIGN(4096): {
    *(.txt .text.*)
        *(.rodata .rodata.*)
        . = ALIGN(4096);
        _ctxsws = .;
        *(.ctxswsec)
        . = ALIGN(4096);
        _ctxswe = .;

        . = ALIGN(4096);
        _interrupts = .;
        *(.interruptsec)
        . = ALIGN(4096);
        _interrupte = .;
    }

    .data ALIGN(4096): {
        _datas = .;
        *(.data .data.*)
    }

    .bss ALIGN(4096): {
        _bss = . ;
        *(.bss .bss.*)
    }

    . = ALIGN(4096);
    _end = . ;

    /* Discard comment and note (but not debugging) sections.  Some
     * versions of GNU ld would otherwise automatically place the
     * ".note.gnu.build-id" section before _start!  */
    /DISCARD/ : {
        *(.comment .comment.* .note .note.*)
    }
}

